import ImageInCollage from "../../../utilities/imageInCollage/ImageInCollage";
import useHobbiesImages, {
  matchElWithImage,
} from "../../../hooks/useHobbiesImageInterval";
const namespace = "about-pg-hobbies";
const HobbiesSVG = () => (
  <svg viewBox="0 0 31 23" fill="none" xmlns="http://www.w3.org/2000/svg">
    <path
      fillRule="evenodd"
      clipRule="evenodd"
      d="M24.8696 10.7823H30.3769C30.72 10.7823 31 11.0615 31 11.4037V15.2829C31 15.625 30.72 15.9043 30.3769 15.9043H24.8696C24.5265 15.9043 24.2465 15.625 24.2465 15.2829V11.4012C24.2465 11.0615 24.5265 10.7823 24.8696 10.7823ZM3.37801 8.91313C5.24487 8.91313 6.75602 10.4225 6.75602 12.2816C6.75602 14.1407 5.24235 15.6502 3.37801 15.6502C1.51367 15.6502 0 14.1433 0 12.2842C0 10.4251 1.51367 8.91313 3.37801 8.91313ZM2.9113 10.5886H3.32503C3.40072 10.5886 3.46379 10.6515 3.46379 10.7269V12.3144H4.91691C4.99259 12.3144 5.05566 12.3772 5.05566 12.4527V12.8653C5.05566 12.9408 4.99259 13.0037 4.91691 13.0037H2.77507V10.7295C2.77254 10.649 2.83561 10.5886 2.9113 10.5886ZM3.37801 9.68041C4.82104 9.68041 5.9891 10.8452 5.9891 12.2842C5.9891 13.7231 4.82104 14.8879 3.37801 14.8879C1.93498 14.8879 0.766927 13.7231 0.766927 12.2842C0.766927 10.8452 1.9375 9.68041 3.37801 9.68041ZM13.2472 19.5646C14.0999 22.0702 17.6696 22.1633 18.4718 19.5646C19.4179 20.4099 22.2106 20.5835 23.25 21.1621C23.578 21.3432 23.8757 21.5797 24.1153 21.8916C24.2743 22.1029 24.4887 22.4929 24.6501 22.9281H7.06633C7.22778 22.4929 7.44222 22.1029 7.60116 21.8916C7.84082 21.5772 8.13599 21.3457 8.46647 21.1621C9.50838 20.5809 12.3011 20.4099 13.2472 19.5646ZM16.827 3.93707C16.9758 3.91191 16.9935 3.91443 17.1171 3.94462V1.3459L14.2916 2.10313V5.29052C14.2941 5.30813 14.2941 5.32825 14.2941 5.34586C14.2941 5.79869 13.6937 6.249 13.1059 6.34963C12.5181 6.45025 12.0413 6.16598 12.0413 5.71315C12.0413 5.26033 12.5181 4.81002 13.1059 4.70939C13.3279 4.67165 13.5322 4.68926 13.7038 4.74713V0.908168H13.729L17.7049 0V4.36474C17.7125 4.39996 17.715 4.43266 17.715 4.46788C17.715 4.84524 17.3164 5.22259 16.827 5.30561C16.335 5.39115 15.939 5.15215 15.939 4.7748C15.939 4.39744 16.335 4.02009 16.827 3.93707ZM12.5912 14.3722C12.4121 14.3797 12.2784 14.4175 12.1851 14.4779C12.1321 14.5156 12.0942 14.5584 12.0665 14.6137C12.0387 14.6741 12.0236 14.747 12.0261 14.8301C12.0337 15.0741 12.1624 15.3961 12.4096 15.7659L12.4121 15.7709L13.2194 17.0514C13.5423 17.5646 13.8829 18.0879 14.3067 18.4728C14.7104 18.8426 15.2048 19.0916 15.8557 19.0942C16.5596 19.0967 17.0767 18.8376 17.4955 18.4451C17.932 18.0401 18.2725 17.4816 18.6131 16.9281L19.5213 15.4338C19.6903 15.0489 19.7534 14.7898 19.7156 14.6363C19.6929 14.5458 19.592 14.5005 19.4229 14.4929C19.3851 14.4904 19.3498 14.4904 19.3145 14.4929C19.2716 14.4929 19.2312 14.4955 19.1858 14.5005C19.1631 14.503 19.1379 14.5005 19.1152 14.4955C19.0344 14.5005 18.9512 14.4955 18.8654 14.4829L19.1732 13.2376C16.8623 13.6024 15.1317 11.8892 12.6871 12.893L12.8612 14.3848C12.7729 14.3873 12.677 14.3848 12.5912 14.3722ZM19.7358 14.0829C19.9603 14.1508 20.1041 14.2942 20.1621 14.5231C20.2277 14.7747 20.1571 15.1345 19.9401 15.625C19.9351 15.6326 19.9325 15.6426 19.9275 15.6502L19.0067 17.1621C18.651 17.7457 18.2902 18.3294 17.8109 18.7772C17.3114 19.2401 16.6983 19.5495 15.8608 19.5495C15.0787 19.547 14.4884 19.2501 14.004 18.8074C13.5373 18.3797 13.179 17.8313 12.8385 17.2929L12.0312 16.0124C11.736 15.5722 11.5821 15.1722 11.5745 14.8426C11.5695 14.6867 11.5947 14.5458 11.6528 14.4225C11.7133 14.2917 11.8066 14.186 11.9303 14.1005C11.9883 14.0602 12.0539 14.0275 12.127 14.0024C12.0741 13.3081 12.0539 12.5609 12.0867 11.8288C12.1043 11.6552 12.1371 11.4791 12.1851 11.3081C12.3919 10.571 12.9091 10.2364 13.5499 9.82884C13.9031 9.60494 14.2916 9.43639 14.6927 9.32067C14.7659 9.30054 15.7699 6.93075 18.9941 10.4074C19.4431 10.893 19.7231 11.2779 19.7862 12.1257L19.7358 14.0829ZM4.08439 22.1759C4.2181 22.4702 4.08439 22.8174 3.78923 22.9482C3.49406 23.0815 3.14591 22.9482 3.01473 22.6539C2.68677 21.9218 2.41683 21.1596 2.22005 20.3747C2.0258 19.6048 1.89714 18.8049 1.83911 17.9873C1.82902 17.8439 1.82145 17.6778 1.81388 17.4891C1.80632 17.2879 1.80379 17.1219 1.80379 16.991C1.80379 16.669 2.06868 16.4049 2.3916 16.4049C2.71452 16.4049 2.97941 16.669 2.97941 16.991C2.97941 17.1822 2.98193 17.3332 2.98446 17.4464C2.9895 17.5772 2.99707 17.7307 3.00968 17.9017C3.06266 18.6489 3.18123 19.381 3.36035 20.0853C3.54199 20.8124 3.78418 21.5117 4.08439 22.1759ZM6.68286 8.05024C6.45581 8.27917 6.08244 8.27917 5.85287 8.05275C5.62329 7.82634 5.62329 7.45402 5.85034 7.22509C6.41545 6.66157 7.15462 6.03768 7.94173 5.49429C8.63298 5.01882 9.36458 4.60121 10.0533 4.33455C10.356 4.21631 10.6966 4.36725 10.8101 4.66662C10.9287 4.96851 10.7773 5.30813 10.4771 5.42133C9.87923 5.65278 9.23088 6.02259 8.60775 6.45277C7.88371 6.95591 7.20003 7.53201 6.68286 8.05024ZM20.8962 5.44649C20.6011 5.31316 20.4674 4.96851 20.6011 4.67417C20.7348 4.37983 21.0804 4.2465 21.3756 4.37983C22.4503 4.86536 23.4569 5.48423 24.3651 6.21378C25.2808 6.94836 26.1007 7.79867 26.8046 8.74206C26.9989 9.00117 26.9434 9.36595 26.681 9.55966C26.4186 9.75337 26.0553 9.69802 25.8611 9.43639C25.2178 8.57351 24.466 7.79867 23.6284 7.12446C22.8009 6.45529 21.8827 5.89177 20.8962 5.44649ZM28.3334 17.9445C28.3561 17.6225 28.6362 17.3785 28.9591 17.4011C29.282 17.4237 29.5267 17.703 29.504 18.025C29.4434 18.825 29.3148 19.6023 29.1281 20.3545C28.9338 21.1243 28.6765 21.869 28.3612 22.5809C28.23 22.8778 27.8844 23.0111 27.5867 22.8803C27.289 22.7495 27.1553 22.4048 27.2865 22.108C27.5766 21.4539 27.8137 20.7721 27.9878 20.0703C28.1644 19.386 28.2804 18.674 28.3334 17.9445ZM27.2461 12.1861L28.7598 13.2376C28.785 13.2527 28.8077 13.2753 28.8254 13.3005C28.896 13.4036 28.8708 13.542 28.7673 13.615L27.2612 14.654C27.2234 14.6867 27.1729 14.7043 27.1174 14.7043C26.9913 14.7043 26.8904 14.6036 26.8904 14.4779V12.3697C26.8904 12.3244 26.903 12.2791 26.9307 12.2414C27.0039 12.1383 27.1452 12.1131 27.2461 12.1861Z"
      fill="#FFC83A"
    />
  </svg>
);
const rectArr = [
  { rect: <rect width="143" height="200" fill="transparent" /> },
  { rect: <rect x="286" y="126" width="54" height="74" fill="transparent" /> },
  { rect: <rect x="143" y="87" width="143" height="113" fill="transparent" /> },
  { rect: <rect x="143" y="87" width="143" height="113" fill="transparent" /> },
  { rect: <rect x="143" y="87" width="143" height="113" fill="transparent" /> },
  { rect: <rect x="143" y="87" width="143" height="113" fill="transparent" /> },
  { rect: <rect x="143" y="87" width="143" height="113" fill="transparent" /> },
  { rect: <rect x="378" width="103" height="87" fill="transparent" /> },
  { rect: <rect x="378" width="103" height="87" fill="transparent" /> },
  { rect: <rect x="378" width="103" height="87" fill="transparent" /> },
  { rect: <rect x="378" width="103" height="87" fill="transparent" /> },
  { rect: <rect x="378" width="103" height="87" fill="transparent" /> },
  { rect: <rect x="202" width="117" height="87" fill="transparent" /> },
  { rect: <rect x="202" width="117" height="87" fill="transparent" /> },
  { rect: <rect x="202" width="117" height="87" fill="transparent" /> },
  { rect: <rect x="202" width="117" height="87" fill="transparent" /> },
  { rect: <rect x="202" width="117" height="87" fill="transparent" /> },
  { rect: <rect x="340" y="87" width="141" height="113" fill="transparent" /> },
  { rect: <rect x="340" y="87" width="141" height="113" fill="transparent" /> },
  { rect: <rect x="340" y="87" width="141" height="113" fill="transparent" /> },
  { rect: <rect x="340" y="87" width="141" height="113" fill="transparent" /> },
  { rect: <rect x="340" y="87" width="141" height="113" fill="transparent" /> },
  { rect: <rect x="319" width="59" height="87" fill="transparent" /> },
  { rect: <rect x="143" width="59" height="87" fill="transparent" /> },
  { rect: <rect x="286" y="87" width="54" height="39" fill="transparent" /> },
];
const verticalCount = rectArr.reduce((a, b) => {
  const increment = b.rect.props.width / b.rect.props.height > 1 ? 1 : 0;
  return a + increment;
}, 0);
const horizontalCount = rectArr.reduce((a, b) => {
  const increment = b.rect.props.width / b.rect.props.height > 1 ? 0 : 1;
  return a + increment;
}, 0);
const ImageCollageSVG = () => {
  const durationInterval: [number, number] = [10000, 30000];
  const {
    horizontalInitialImgs,
    verticalInitialImgs,
    horizontalNextItem,
    verticalNextItem,
  } = useHobbiesImages({
    vertical: {
      count: verticalCount,
      durationInterval,
    },
    horizontal: {
      count: horizontalCount,
      durationInterval,
    },
  });
  const rectArrEls = matchElWithImage(rectArr, [
    ...horizontalInitialImgs,
    ...verticalInitialImgs,
  ]);
  return (
    <svg viewBox="0 0 481 200" fill="none" xmlns="http://www.w3.org/2000/svg">
      {rectArrEls.map((el, idx) => (
        <ImageInCollage
          nextItem={
            el.orientation === "horizontal"
              ? horizontalNextItem
              : verticalNextItem
          }
          duration={el.img.duration}
          description={el.img.imgDescription}
          src={`${process.env.REACT_APP_MEDIA_FILES_URL}/${el.img.imgURL}`}
          placeholderSrc={`${process.env.REACT_APP_MEDIA_FILES_URL}/${el.img.placeholderURL}`}
          key={idx}
          namespace={namespace}
          id={idx.toString()}
        >
          {el.rect}
        </ImageInCollage>
      ))}
    </svg>
  );
};
const HobbiesBanner = () => {
  return (
    <div id={`${namespace}`}>
      <div id={`${namespace}-inner`}>
        <h2>
          <HobbiesSVG />
          <span>Hobbies</span>
        </h2>
        <div id={`${namespace}-image-collage`}>
          <ImageCollageSVG />
        </div>
      </div>
    </div>
  );
};
export default HobbiesBanner;
